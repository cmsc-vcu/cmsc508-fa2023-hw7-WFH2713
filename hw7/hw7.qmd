---
title: Homework 7 - Creating a resume database
author: William Hunter
date: 2023/11/13
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

(include a brief description of what is in this document)

(Please clean up any comments that I included.  This is a scaffold document.)

GITHUB URL:  <your URL goes here!>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project, "Creating a Resume Database," is designed to develop a structured database system for storing and managing resume data.

## Crows-foot diagram

Diagram of The structure and relationships of a database designed to manage a company's ressume data.

```{mermaid}
%%| echo: false
erDiagram
    SKILLS ||--o{ PEOPLESKILLS : "has"
    PEOPLE ||--o{ PEOPLESKILLS : "possesses"
    PEOPLE ||--o{ PEOPLE-ROLES : "occupies"
    ROLES ||--o{ PEOPLE-ROLES : "assigned to"
    SKILLS {
        int id
        string name
        string description
        string tag
        string url
        int time_commitment
    }
    PEOPLE {
        int id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    PEOPLESKILLS {
        int id
        int skills_id
        int people_id
        date date_acquired
    }
    ROLES {
        int id
        string name
        int sort_priority
    }
    PEOPLE-ROLES {
        int id
        int people_id
        int role_id
        date date_role_acquired
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.
```{python}
#| echo: false
#| eval: true

try:
    sql = "SELECT * FROM people;"
    df_people = pd.read_sql(sql, cnx)
    display(df_people)
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df_people = pd.DataFrame()  # Initialize an empty DataFrame

# Display the DataFrame (either populated with data or empty)
df_people
```
## People table

The *people* table contains elements that describe ID, Firts and Last name, email, linkdin and Headshot URL, Discord handle, Breif Bio and Date Joined 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true

# Display the 'people' table
try:
    sql = "SELECT * FROM people;"
    df_people = pd.read_sql(sql, cnx)
    display(df_people)
except Exception as e:
    message = str(e)
    print(f"An error occurred while retrieving the people table: {e}")
    df_people = pd.DataFrame()  # Initialize an empty DataFrame

```

### Skills table

The *skills* table contains elements that describe: ID, Name, Description, Tag, URL and Time commitment.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

try:
    sql_skills = "SELECT * FROM skills;"
    df_skills = pd.read_sql(sql_skills, cnx)
    display(df_skills)
except Exception as e:
    print(f"An error occurred:\n\n{e}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills
```

### Roles table

The *roles* table contains elements that describe: ID, Name and Sort Priority.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

try:
    sql = "SELECT * FROM roles;"
    df_roles = pd.read_sql(sql, cnx)
    display(df_roles)  # Display the roles table data
except Exception as e:
    print(f"An error occurred while retrieving the roles table: {e}")
    df_roles = pd.DataFrame()  # Initialize an empty DataFrame in case of error
df_roles

```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = """
SELECT name, tag, description FROM skills ORDER BY name;
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df_skills = pd.read_sql(sql, cnx)
    df_skills
except Exception as e:
    print(f"An error occurred:\n\n{e}\n\nIgnoring and moving on.")
    df_skills = pd.DataFrame()
df_skills

```


### List people names and email addresses ordered by last_name
```{python}
sql = """
SELECT first_name, last_name, email FROM people ORDER BY last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df_people = pd.read_sql(sql, cnx)
    display(df_people)
except Exception as e:
    print(f"An error occurred while retrieving people names and email addresses: {e}")
    df_people = pd.DataFrame()  # Initialize an empty DataFrame in case of error
df_people

```


### List skill names of Person 1
```{python}
sql = """
SELECT skills.name 
FROM skills 
JOIN peopleskills ON skills.id = peopleskills.skills_id 
JOIN people ON peopleskills.people_id = people.id 
WHERE people.id = 1;
"""

```

```{python}
#| echo: false
#| eval: true
try:
    df_skills_person1 = pd.read_sql(sql, cnx)
    display(df_skills_person1)
except Exception as e:
    print(f"An error occurred while retrieving skill names for Person 1: {e}")
    df_skills_person1 = pd.DataFrame()  # Initialize an empty DataFrame in case of error
df_skills_person1

```

### List people names with Skill 6


### List people with a DEVELOPER role


### List names and email addresses of people without skills


### List names and tags of unused skills


### List people names and skill names with the BOSS role


### List ids and names of unused roles


## Reflection



